#+title: laooree's Emacs Configuration
#+author: laooree
#+description: My emacs configuration, in org-mode
#+startup: content
#+auto_tangle: t

This is my Emacs configuration, written in org-mode.

* Description

My Emacs configuration is composed by:
- =config.org=
- =custom.el=
The latter contains all the customizations that are made through the =M-x
customize= interface, and the Emacs configuration is set to load it.

The =config.org= file uses the =org-babel-tangle= feature to generate the
following two files:
- =early-init.el=
- =init.el=
This feature concatenates the content of all the emacs-lisp source blocks that
contain a =:tangle "filename.el"= specification in =filename.el=.

** Dependencies

This config is tested with =Emacs >= 29.4=, on Linux.

The config requires:
- =git=;
- =ripgrep=;
- =Iosevka Nerd Font= font;
- =Nerd Icons=, which can be installed running =M-x nerd-icons-install-fonts=.

** Instructions

For the first installation, it's necessary to visit the =config.org= file and
execute =org-babel-tangle= command (=C-c C-v t=). The next times, the tangling
happens automatically every time the the =config-org= file is saved, thanks to
the [[https://github.com/yilkalargaw/org-auto-tangle][org-auto-tangle]] package.

* Early initialization
** Speed up the startup

Based on Nicolas Rougier's [[https://github.com/rougier/dotemacs/blob/master/dotemacs.org][early-init file]]. It disables garbage collection at
startup and enables it afterwards. Most importantly, it disables =package.el=,
as =Elpaca= is used instead.

#+begin_src emacs-lisp :tangle "early-init.el"

  (setq
   gc-cons-threshold most-positive-fixnum    ; Very large threshold for garbage
                                             ; collector during init
   package-enable-at-startup nil)            ; We'll use straight.el

  (setq native-comp-eln-load-path
        (list (expand-file-name "eln-cache" user-emacs-directory)))

  ;; Reset garbage collector limit after init process has ended (8Mo)
  (add-hook 'after-init-hook
            #'(lambda () (setq gc-cons-threshold (* 8 1024 1024))))

#+end_src

** Package manager

#+begin_src emacs-lisp :tangle "early-init.el"
  (defvar elpaca-installer-version 0.11)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil :depth 1 :inherit ignore
                                :files (:defaults "elpaca-test.el" (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (<= emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let* ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                    ((zerop (apply #'call-process `("git" nil ,buffer t "clone"
                                                    ,@(when-let* ((depth (plist-get order :depth)))
                                                        (list (format "--depth=%d" depth) "--no-single-branch"))
                                                    ,(plist-get order :repo) ,repo))))
                    ((zerop (call-process "git" nil buffer t "checkout"
                                          (or (plist-get order :ref) "--"))))
                    (emacs (concat invocation-directory invocation-name))
                    ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                          "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                    ((require 'elpaca))
                    ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (let ((load-source-file-function nil)) (load "./elpaca-autoloads"))))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))

  ;; Disable symlinks on MS Windows
  (when (eq system-type 'windows-nt)
    (elpaca-no-symlink-mode))

  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable use-package :ensure support for Elpaca.
    (elpaca-use-package-mode))
#+end_src

** Theme and fonts

#+begin_src emacs-lisp :tangle "early-init.el"
  ;; Default frame title
  (setq-default frame-title-format '("Gnu Emacs"))


  (use-package ef-themes
    :ensure t
    :demand t
    :config
    (ef-themes-select 'ef-autumn))

  ;; Fonts
  (let ((mono-spaced-font "Iosevka Nerd Font"))
    (set-face-attribute 'default nil :family mono-spaced-font :height 180)
    (set-face-attribute 'fixed-pitch nil :family mono-spaced-font :height 180))

  (elpaca-wait)
#+end_src

*** Export theme colors to stylix.nix
#+begin_src emacs-lisp :tangle "init.el"
  (defun my/theme-colors-to-stylix (colors-list stylix-bases)
    "Turn a list of strings into a string, putting each element on a new line."
    (cond
     ((= 0 (length colors-list)) "")
     (t (concat (car stylix-bases) " = " (car colors-list) ";\n" (my/theme-colors-to-stylix (cdr colors-list) (cdr stylix-bases))))
     ))

  (defun my/format-colors-for-nix (colors-string)
    "Format the colors string with proper indentation and quotes for Nix."
    (let ((lines (split-string colors-string "\n" t "\\s *")))
      (mapconcat
       (lambda (line)
         (when (string-match "^\\s *\\(base[0-9A-F]+\\)\\s *=\\s *\\(#?[0-9A-Fa-f]+\\)\\s *;?\\s *$" line)
           (let ((base-name (match-string 1 line))
                 (color-value (match-string 2 line)))
             ;; Add # if not present and ensure proper formatting
             (unless (string-prefix-p "#" color-value)
               (setq color-value (concat "#" color-value)))
             (format "      %s = \"%s\";" base-name color-value))))
       lines
       "\n")))

  (defun my/export-theme-to-stylix (file-path new-colors-string)
    "Replace the base16Scheme colors in a Nix file while preserving the rest of the structure."
    (with-temp-buffer
      ;; Read the existing file
      (insert-file-contents file-path)

      ;; Use a more precise regex to find the base16Scheme block
      (goto-char (point-min))
      (when (re-search-forward "base16Scheme\\s *=\\s *{" nil t)
        (let ((start-pos (line-beginning-position))
              (brace-count 1)
              end-pos)

          ;; Find the matching closing brace by counting braces
          (while (and (> brace-count 0) (re-search-forward "[{}]" nil t))
            (if (string= (match-string 0) "{")
                (setq brace-count (1+ brace-count))
              (setq brace-count (1- brace-count))))

          (when (= brace-count 0)
            (setq end-pos (line-end-position))
            ;; Replace the entire base16Scheme block
            (delete-region start-pos end-pos)
            (goto-char start-pos)
            (insert (concat "    base16Scheme = {\n"
                            (my/format-colors-for-nix new-colors-string)
                            "\n    };")))))
      (write-region (point-min) (point-max) file-path)))

  (with-eval-after-load 'ef-themes
    (let
        ((colors (ef-themes-with-colors
                   (list bg-main
                         bg-dim
                         bg-alt
                         bg-active
                         fg-dim
                         fg-main
                         fg-mode-line
                         keybind
                         red
                         yellow-warmer
                         yellow
                         green
                         cyan
                         blue
                         magenta
                         yellow-faint
                         bg-mode-line
                         fg-alt
                         bg-graph-red-1
                         bg-graph-green-1
                         bg-graph-yellow-1
                         bg-graph-blue-1
                         bg-graph-magenta-1
                         bg-graph-cyan-1
                         )))
         (bases (list "base00"
                      "base01"
                      "base02"
                      "base03"
                      "base04"
                      "base05"
                      "base06"
                      "base07"
                      "base08"
                      "base09"
                      "base0A"
                      "base0B"
                      "base0C"
                      "base0D"
                      "base0E"
                      "base0F"
                      "base10"
                      "base11"
                      "base12"
                      "base13"
                      "base14"
                      "base15"
                      "base16"
                      "base17"
                      )))
      (my/export-theme-to-stylix (expand-file-name "~/.dotfiles/modules/nixos/stylix.nix")
                                        (my/theme-colors-to-stylix colors bases))))
#+end_src

* Eldoc

Ensure latest version of =eldoc= is installed. =use-package= is giving some
issues here, so this workaround is used instead. The first three lines ensure
that =eldoc= does not load before =elpaca=, allowing for =elpaca= to update
=eldoc=, which is then loaded.

#+begin_src emacs-lisp :tangle "init.el"
(unload-feature 'eldoc t)
(setq custom-delayed-init-variables '())
(defvar global-eldoc-mode nil)

(elpaca eldoc
  (require 'eldoc)
  (global-eldoc-mode))
#+end_src

* general.el + which-key

=general.el= must be loaded before every usage of =:general= key in =use-package=, and separated with an =(elpaca-wait)= instruction. =which-key= is loaded here to integrate with =general.el= and assign keymaps names.

** which-key

#+begin_src emacs-lisp :tangle "init.el"
  (use-package which-key
    :ensure t
    :config
    (which-key-setup-minibuffer)
    (which-key-mode))
#+end_src

** general.el

#+begin_src emacs-lisp :tangle "init.el"
  (use-package general
    :ensure t
    :demand t

    :config
    (general-define-key
     :states '(normal)
     :prefix "SPC"

     "f f" #'find-file
     "f r" #'recentf-open
     "b k" #'kill-this-buffer

     "F F" #'make-frame
     "F f" #'find-file-other-frame
     "F k" #'delete-frame
    ))

  (elpaca-wait)
#+end_src

* Evil

#+begin_src emacs-lisp :tangle "init.el"
  (use-package evil
    :ensure t
    :demand t
    :after general

    :init
    (setq evil-want-fine-undo t)
    ;; Required by evil collection
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-undo-system 'undo-redo)

    :general
    (:states '(normal)
             :prefix "SPC"

             ;; window
             "w" '(:ignore t :which-key "window")
             "w <left>" #'evil-window-left
             "w <down>" #'evil-window-down
             "w <up>" #'evil-window-up
             "w <right>" #'evil-window-right
             "w h" #'evil-window-split
             "w v" #'evil-window-vsplit
             "w k" #'kill-buffer-and-window)

    :config
    (evil-mode 1)
    (add-hook 'org-mode-hook
              (lambda ()
                (evil-local-set-key 'normal (kbd "TAB") 'org-cycle)
                (evil-local-set-key 'normal (kbd "<tab>") 'org-cycle))))

  ;; Evil collection
  (use-package evil-collection
    :after evil
    :ensure t
    :config
    (evil-collection-init))

  ;; Evil numbers
  (use-package evil-numbers
    :ensure t
    :after evil
    :config
    (define-key evil-normal-state-map (kbd "+") 'evil-numbers/inc-at-pt)
    (define-key evil-normal-state-map (kbd "-") 'evil-numbers/dec-at-pt))

  ;; Evil snipe
  (use-package evil-snipe
    :ensure t
    :after evil
    :config
    (evil-snipe-mode +1)
    (evil-snipe-override-mode +1))

  (elpaca-wait)
#+end_src

* UI and UX
** Some built-in options:

#+begin_src emacs-lisp :tangle "init.el"

  ;; Set different file for M-x customize interface
  (setq custom-file (locate-user-emacs-file "custom.el"))
  (load custom-file :no-error-if-file-is-missing)

  ;; Easily visit recent files
  (recentf-mode 1)

  ;; Wrap lines and set fill-column width
  (setq-default fill-column 80)
  (global-visual-line-mode 1)

  ;; Warn user if trying to open a file bigger than 100MB
  (setq large-file-warning-threshold 100000000)

  ;; Accept y or n as yes or no
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Confirm on kill-emacs
  (setq confirm-kill-emacs 'y-or-n-p)

  ;;Require files to end with a newline.
  (setq require-final-newline t)

  ;; Backups and autosaves location
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))

  ;; Automatically revert buffers
  (global-auto-revert-mode t)

  ;; Scroll one line at time
  (setq-default scroll-conservatively 10000
                scroll-step 1
                scroll-margin 5)

  ;; Prefer utf-8 encoding
  (prefer-coding-system 'utf-8)

  (setq-default visible-bell nil             ;; No visual bell
                ring-bell-function 'ignore)  ;; No bell

  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)

  (setq inhibit-startup-message t)
  ;; (setq initial-scratch-message nil)

  ;; Prevent compilation warnings to pop-up
  (add-to-list 'display-buffer-alist
               '("\\`\\*\\(Warnings\\|Compile-Log\\)\\*\\'"
                 (display-buffer-no-window)
                 (allow-no-window . t)))

  ;; whitespace-mode
  (setq whitespace-style '(face trailing))
  (global-whitespace-mode 1)

  (setq display-line-numbers t)
  (global-display-line-numbers-mode)

 #+end_src

** org-auto-tangle

This package allows to automatically tangle =org= files when they are
saved. When the minor mode is active, it is sufficient to add =#+auto_tangle: t=
in the org file for which you want auto tangling.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-auto-tangle
    :ensure t
    :after org
    :hook (org-mode . org-auto-tangle-mode))
#+end_src

** Spacious padding
#+begin_src emacs-lisp :tangle "init.el"
  (use-package spacious-padding
    :ensure t
    :demand t
    :if (display-graphic-p)

    :init
    (setq spacious-padding-widths
          '( :internal-border-width 15
             :header-line-width 4
             :mode-line-width 6
             :tab-width 4
             :right-divider-width 30
             :scroll-bar-width 8))

    :config
    (spacious-padding-mode 1))
#+end_src
** Dired

Tweak =dired=. Options should be self-explanatory.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package dired
    :ensure nil
    :commands (dired)
    :hook
    ((dired-mode . dired-hide-details-mode)
     (dired-mode . hl-line-mode))
    :config
    (setq dired-recursive-copies 'always)
    (setq dired-recursive-deletes 'always)
    (setq delete-by-moving-to-trash t)
    (setq dired-kill-when-opening-new-dired-buffer t)
    (setq dired-dwim-target t))
#+end_src

The =dired-subtree= allows to expand folders using =TAB= key.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package dired-subtree
    :ensure t
    :after (dired)
    :bind
    ( :map dired-mode-map
      ("<tab>" . dired-subtree-toggle)
      ("TAB" . dired-subtree-toggle)
      ("<backtab>" . dired-subtree-remove)
      ("S-TAB" . dired-subtree-remove))
    :config
    (setq dired-subtree-use-backgrounds nil))
#+end_src

** Emoji

#+begin_src emacs-lisp :tangle "init.el"
  (use-package emojify
    :ensure t
    ;;:defer t
    :init
    (setq emojify-display-style 'unicode)
    (setq emojify-emoji-styles '(unicode))
    (when (member "Noto Color Emoji" (font-family-list))
      (set-fontset-font
       t 'symbol (font-spec :family "Noto Color Emoji") nil 'prepend))
    :config
    (bind-key* (kbd "C-c .") #'emojify-insert-emoji)
    :hook
    (after-init . global-emojify-mode))
#+end_src

** Terminal
*** Wayland clipboard
#+begin_src emacs-lisp :tangle "init.el"
  ;; credit: yorickvP on Github
  (when (string= (getenv "XDG_SESSION_TYPE") "wayland")
    (setq wl-copy-process nil)

    (defun wl-copy (text)
      (setq wl-copy-process (make-process :name "wl-copy"
                                          :buffer nil
                                          :command '("wl-copy" "-f" "-n")
                                          :connection-type 'pipe))
      (process-send-string wl-copy-process text)
      (process-send-eof wl-copy-process))

    (defun wl-paste ()
      (if (and wl-copy-process (process-live-p wl-copy-process))
          nil ; should return nil if we're the current paste owner
        (shell-command-to-string "wl-paste -n | tr -d \r")))

    (setq interprogram-cut-function 'wl-copy)
    (setq interprogram-paste-function 'wl-paste))
#+end_src

*** Cursor shape
#+begin_src emacs-lisp :tangle "init.el"
  (defun my/set-cursor-shape ()
    "Set terminal cursor shape based on evil state."
    (let ((shape
           (cond
            ((evil-insert-state-p) "\e[5 q")  ;; Blinking bar
            ((evil-motion-state-p) "\e[0 q")  ;; Block
            ((evil-operator-state-p) "\e[3 q");; Underline
            ((evil-replace-state-p) "\e[3 q") ;; Underline
            ((evil-visual-state-p) "\e[0 q")  ;; Block
            (t "\e[0 q"))))                   ;; Block
      (send-string-to-terminal shape)))

  ;; Hook into Evil state changes
  (unless (display-graphic-p)
    (add-hook 'post-command-hook #'my/set-cursor-shape))
#+end_src
#+end_src
** Nerd icons

Install and use nerd-icons.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package nerd-icons
    :defer t
    :ensure t)

  (use-package nerd-icons-completion
    :ensure t
    :after (marginalia)
    :config
    (add-hook 'marginalia-mode-hook #'nerd-icons-completion-marginalia-setup))

  (use-package nerd-icons-corfu
    :ensure t
    :after (corfu)
    :config
    (add-to-list 'corfu-margin-formatters #'nerd-icons-corfu-formatter))

  (use-package nerd-icons-dired
    :ensure t
    :defer t
    :hook
    (dired-mode . nerd-icons-dired-mode))
#+end_src

** Mode-line

#+begin_src  emacs-lisp :tangle "init.el"
  (use-package doom-modeline
    :ensure t
    :config (doom-modeline-mode 1))

#+end_src

** Rainbow csv

Paint each column in =.csv= files with different colors.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package rainbow-csv
    :ensure (rainbow-csv :host github :repo "emacs-vs/rainbow-csv")
    :defer t
    :config
    (add-hook 'csv-mode-hook #'rainbow-csv-mode)
    (add-hook 'tsv-mode-hook #'rainbow-csv-mode))
#+end_src

** Rainbow delimiters

Paint delimiters with colors based on the nesting level. Super useful with lisp,
very useful everywhere else.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package rainbow-delimiters
    :ensure t
    :defer t
    :hook
    (emacs-lisp-mode . rainbow-delimiters-mode)
    (nix-mode . rainbow-delimiters-mode)
    )
#+end_src

** Rainbow mode

Rainbow mode colorizes color names in buffers. Disabled by default.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package rainbow-mode
    :ensure t
    :defer t)
#+end_src

** Open files with

Specify external programs to open specific file extensions.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package openwith
    :ensure t
    :init
    (setq openwith-associations '(("\\.pdf\\'" "evince" (file))))

    :config
    (openwith-mode t))
#+end_src
** Magit

#+begin_src emacs-lisp :tangle "init.el"
  ;; Make sure dependencies are up to date
  (use-package transient
    :ensure t
    :defer t)

  ;; Install magit
  (use-package magit
    :ensure t
    :defer t

    :general
    (:states '(normal)
             :prefix "SPC"
             "g" '(:ignore t :which-key "magit")
             "g g" #'magit-status
             ))
#+end_src

** Beacon

#+begin_src emacs-lisp :tangle "init.el"
  (use-package beacon
    :ensure t
    :if (display-graphic-p)
    :init
    (setq beacon-size 10
          beacon-blink-duration 0.5
          beacon-blink-delay 0.0
          beacon-color (ef-themes-with-colors cursor))
    :config
    (beacon-mode 1))
#+end_src

** Highlight indentation
#+begin_src emacs-lisp :tangle "init.el"
  (use-package highlight-indentation
    :ensure (highlight-indentation :host github :repo "antonj/Highlight-Indentation-for-Emacs")
    :defer t)
#+end_src
** Elpaca wait

#+begin_src emacs-lisp :tangle "init.el"
  (elpaca-wait)
#+end_src

* Completions and suggestions
** Vertico

#+begin_src emacs-lisp :tangle "init.el"
  (use-package vertico
    :ensure (vertico :files (:defaults "extensions/*")
                     :includes (vertico-mouse
                                vertico-directory))
    :config (vertico-mode))

  ;;Enable mouse integration
  (use-package vertico-mouse
    :after (vertico)
    :ensure nil
    :config (vertico-mouse-mode))

  ;; Faster navigation in vertico minibuffer
  (use-package vertico-directory
    :after (vertico)
    :ensure nil
    :bind (:map vertico-map
                ("RET" . vertico-directory-enter)
                ("DEL" . vertico-directory-delete-char)
                ("M-DEL" . vertico-directory-delete-word)))

#+end_src

** Marginalia

#+begin_src emacs-lisp :tangle "init.el"
  (use-package marginalia
    :ensure t
    :defer t
    :init (marginalia-mode))
#+end_src

** Orderless

#+begin_src emacs-lisp :tangle "init.el"
  (use-package orderless
    :ensure t
    :defer t
    :init
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides nil
          read-file-name-completion-ignore-case t
          read-buffer-completion-ignore-case t
          completion-ignore-case t
          orderless-matching-styles '(orderless-literal
                                      orderless-regexp)))
                                      ;; orderless-flex)))
#+end_src

** Consult

#+begin_src emacs-lisp :tangle "init.el"
  (use-package consult
    :ensure t
    :defer t

    :general
    (:states '(normal)
             :prefix "SPC"

             "c" '(:ignore t :which-key "consult")
             "c d" #'consult-fd
             "c f" #'consult-flymake
             "c l" #'consult-line
             "c m" #'consult-man
             "c r" #'consult-ripgrep

             "b" '(:ignore t :which-key "buffer")
             "b b" #'consult-buffer))
#+end_src

** Corfu

#+begin_src emacs-lisp :tangle "init.el"

  (use-package corfu
    :ensure t

    :custom
    (corfu-cycle t) ;; Enable cycling through candidates
    (corfu-auto t)  ;; Automatically pop-up
    (corfu-auto-prefix 3)  ;; Require 3 characters for auto pop-up
    (corfu-auto-delay 0.5) ;; Wait half a second before pop-up
    (corfu-quit-at-boundary 'separator) ;; Keep pop-up open with separator
    (corfu-preview-current 'insert) ;; Do not preview candidates in buffer

    :init
    (global-corfu-mode) ;; Enable corfu everywhere
    (corfu-history-mode) ;; Save completion history
    )

#+end_src

Corfu uses childframes, which are not available in tty. This package makes corfu
work also in tty:

#+begin_src emacs-lisp :tangle "init.el"
  (use-package corfu-terminal
    :ensure (corfu-terminal :host codeberg :repo "akib/emacs-corfu-terminal")
    :demand t
    :config
    (unless (display-graphic-p)
      (corfu-terminal-mode +1))
    )
#+end_src

** yasnippet

#+begin_src emacs-lisp :tangle "init.el"
  ;; Install yasnippet
  (use-package yasnippet
    :ensure t
    :defer t
    :config
    (yas-reload-all)
    :hook
    (prog-mode . yas-minor-mode))

  ;; Install official yasnippet snippets
  (use-package yasnippet-snippets
    :ensure t)
#+end_src

** Elpaca wait

#+begin_src emacs-lisp :tangle "init.el"
  (elpaca-wait)
#+end_src

** Grammarly
#+begin_src emacs-lisp :tangle "init.el"
  (use-package flymake-grammarly
    :ensure (flymake-grammarly :host github :repo "emacs-grammarly/flymake-grammarly")
    :defer t)
#+end_src
* Org-mode

** org-mode

Install latest org-mode.

#+begin_src emacs-lisp :tangle "init.el"
  (use-package org
    :ensure t
    :defer t

    :init
    (setq org-startup-indented t)

    :general
    (:states '(normal)
             :prefix "SPC"
             "o" '(:ignore t :which-key "org")
             "o a" #'org-agenda
             "o c" #'org-capture)

    :config
    (let ((pcloud-base-folder (cond
                               ((eq system-type 'windows-nt) "p:/")
                               ((eq system-type 'gnu/linux) "~/pCloudSync")
                               (t "~/pCloudSync")))) ;; fallback

      ;; org-agenda-files
      (setq org-agenda-files
            (list (expand-file-name "org/agenda.org" pcloud-base-folder)
                  (expand-file-name "org/todo.org" pcloud-base-folder)
                  (expand-file-name "org/inbox.org" pcloud-base-folder)
                  (expand-file-name "org/calendar.org" pcloud-base-folder)))

      ;; org-capture-templates
      (setq org-capture-templates
            `(("t" "Todo" entry (file+headline ,(expand-file-name "org/agenda.org" pcloud-base-folder) "Tasks")
               "* TODO %?\n  %i\n  %a\n")
              ("e" "Event" entry (file+headline ,(expand-file-name "org/agenda.org" pcloud-base-folder) "Events")
               "* %?\n  %^T\n")
              ("j" "Journal" entry (file+datetree ,(expand-file-name "org/journal.org" pcloud-base-folder))
               "* %?\nEntered on %U\n")
              ("i" "Idea" entry (file+headline ,(expand-file-name "org/inbox.org" pcloud-base-folder) "Ideas")
               "* %?\n %U\n")))))
#+end_src

** org-modern
#+begin_src emacs-lisp :tangle "init.el"
  (use-package org-modern
    :ensure t
    :defer t

    :hook
    (org-mode . org-modern-mode)
    (org-agenda-finalize . org-modern-agenda))
#+end_src
* Notes
** Denote
#+begin_src emacs-lisp :tangle "init.el"
  (use-package denote
    :ensure t
    :init
    (setq denote-directory (expand-file-name "~/pCloudSync/org/notes"))

    :general
    (:states '(normal)
             :prefix "SPC"
             "n" '(:ignore t :which-key "notes")
             "n n" #'denote
             "n g" #'denote-grep))

#+end_src
** Elpaca wait

#+begin_src emacs-lisp :tangle "init.el"
  (elpaca-wait)
#+end_src
* Programming
** Indentation

#+begin_src emacs-lisp :tangle "init.el"
  (setq-default indent-tabs-mode nil        ;; Stop using tabs to indent
                tab-always-indent 'complete ;; Indent first then try completions
                tab-width 2)                ;; Set 2 as tab width
  (setq indent-line-function 'insert-tab)
#+end_src

** Load languages in org-babel

#+begin_src emacs-lisp :tangle "init.el"
  (add-hook 'org-mode-hook (lambda ()
                             (org-babel-do-load-languages
                              'org-babel-load-languages
                              '(
                                (emacs-lisp . t)
                                (python . t)
                                (matlab . t)
                                ))))
#+end_src

** tree-sitter

#+begin_src emacs-lisp :tangle "init.el"
  (use-package tree-sitter
    :ensure t
    :after tree-sitter-langs
    :demand t
    :config
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))

  (use-package tree-sitter-langs
    :ensure t
    :demand t)
#+end_src

** Formatter

#+begin_src emacs-lisp :tangle "init.el"
  (use-package format-all
    :ensure t
    :defer t)
#+end_src

** Eglot

This block ensures that =eglot= is updated to the latest release.

#+begin_src emacs-lisp :tangle "init.el"
  ;; Ensure flymake is up to date
  (use-package flymake
    :ensure t
    :defer t)

  (use-package eglot
    :ensure t
    :defer t
    :after general

    :general
    (:states '(normal)
             :keymaps 'eglot-mode-map
             :prefix "SPC"
             "e" '(:ignore t :which-key "eglot")
             "e a" #'eglot-code-actions
             "e o" #'eglot-code-action-organize-imports
             "e r" #'eglot-rename
             "e f" #'eglot-format)
    )
#+end_src

** Matlab

Install and configure Matlab mode:

#+begin_src emacs-lisp :tangle "init.el"
  (use-package matlab-mode
    :ensure t
    :defer t
    :init (setq matlab-indent-level 2  ;; Set indentation level to 2
                matlab-indent-function-body t) ;; Indent function bodies
    :config
    (evil-set-initial-state 'matlab-shell-mode 'emacs)
  )
#+end_src

** Latex

#+begin_src emacs-lisp :tangle "init.el"
  (use-package auctex
    :ensure t
    :defer t

    :init
    (setq font-latex-fontify-script nil
          font-latex-fontify-sectioning 'color)

    :hook
    (LaTeX-mode . yas-minor-mode) ;; enable yasnippet mode
    (LaTeX-mode . TeX-source-correlate-mode) ;; enable synctex
    (LaTeX-mode . flyspell-mode) ;; enable grammar checking
    (LaTeX-mode . flymake-mode) ;; enable LaTeX syntax checking
    (LaTeX-mode . (lambda ()
                    (setq-local eglot-stay-out-of '(flymake))
                    (eglot-ensure)))
    (LaTeX-mode . (lambda ()
                    (add-hook 'eglot-managed-mode-hook
                              (lambda () (eglot-inlay-hints-mode -1))
                              nil t)))
    :general
    (:states '(normal)
             :prefix "SPC"
             :keymaps 'LaTeX-mode-map
             "l" '(:ignore t :which-key "latex")
             "l l" #'TeX-command-master
             "l a" #'TeX-command-run-all)

    :config
    (with-eval-after-load 'tex
      (add-to-list 'TeX-command-list
                   '("LuaLaTeX" "lualatex %s" TeX-run-TeX nil t
                     :help "Run LuaLaTeX")))
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(LaTeX-mode . ("/run/current-system/sw/bin/texlab"))))
    )
#+end_src

** Python

#+begin_src emacs-lisp :tangle "init.el"
  (use-package python
    :ensure nil ;; built-in
    :defer t

    :init
    (setq python-indent-guess-indent-offset t
          python-indent-guess-indent-offset-verbose nil
          python-indent-offset 4)

    :hook
    (python-mode . eglot-ensure)
    (python-mode . highlight-indentation-mode)

    :config
    (evil-set-initial-state 'inferior-python-mode 'emacs)
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(python-mode . ("pyright-langserver" "--stdio")))
    ))
#+end_src

** Shell

#+begin_src emacs-lisp :tangle "init.el"
  ;; Set shell indentation to 2
  (setq sh-basic-offset 2)
#+end_src

** Nix

#+begin_src emacs-lisp :tangle "init.el"
  (use-package nix-mode
    :ensure t
    :defer t
    :mode "\\.nix\\'")
#+end_src

** Haskell

#+begin_src emacs-lisp :tangle "init.el"
  (use-package haskell-mode
    :ensure t
    :defer t

    :hook
    (haskell-mode . eglot-ensure)

    :config
    (with-eval-after-load 'eglot
      (add-to-list 'eglot-server-programs
                   '(haskell-mode . ("haskell-language-server-wrapper" "--lsp"))))
    )
#+end_src

** Faces
*** font-lock

#+begin_src emacs-lisp :tangle "init.el"
  ;; (let ((miasma-light-charcoal "#222222")
  ;;   (miasma-charcoal           "#1c1c1c")
  ;;   (miasma-obsidian           "#151515")
  ;;   (miasma-graphite           "#444444")
  ;;   (miasma-dark-gray          "#666666")
  ;;   (miasma-light-gray         "#c2c2b0")
  ;;   (miasma-marble             "#eaeaea")
  ;;   (miasma-river              "#1f3a5f")
  ;;   (miasma-sky                "#87CEEB")
  ;;   (miasma-forest             "#242d1d")
  ;;   (miasma-moss               "#2f361f")
  ;;   (miasma-olive              "#43492a")
  ;;   (miasma-ivy                "#335533")
  ;;   (miasma-eucalyptus         "#5f875f")
  ;;   (miasma-reseda             "#78834b")
  ;;   (miasma-walnut             "#685742")
  ;;   (miasma-tangerine          "#fd9720")
  ;;   (miasma-copper             "#bb7744")
  ;;   (miasma-cedar              "#b36d43")
  ;;   (miasma-terracota          "#c86448")
  ;;   (miasma-chestnut           "#553333")
  ;;   (miasma-fire               "#824040")
  ;;   (miasma-lemon              "#fbec9f")
  ;;   (miasma-ecru               "#d7c483")
  ;;   (miasma-brass              "#c9a554"))
  ;;   (custom-set-faces
  ;;    `(font-lock-constant-face      ((t (:foreground ,miasma-light-gray :slant italic))))
  ;;    `(font-lock-function-name-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-lock-variable-name-face ((t (:foreground ,miasma-light-gray))))
  ;;    ))
#+end_src

*** tree-sitter

The goal of this section is to reduce the number of colors used in code
highlighting.

#+begin_src emacs-lisp :tangle "init.el"
  ;; (with-eval-after-load 'tree-sitter
  ;;   (let ((miasma-light-charcoal "#222222")
  ;;     (miasma-charcoal           "#1c1c1c")
  ;;     (miasma-obsidian           "#151515")
  ;;     (miasma-graphite           "#444444")
  ;;     (miasma-dark-gray          "#666666")
  ;;     (miasma-light-gray         "#c2c2b0")
  ;;     (miasma-marble             "#eaeaea")
  ;;     (miasma-river              "#1f3a5f")
  ;;     (miasma-sky                "#87CEEB")
  ;;     (miasma-forest             "#242d1d")
  ;;     (miasma-moss               "#2f361f")
  ;;     (miasma-olive              "#43492a")
  ;;     (miasma-ivy                "#335533")
  ;;     (miasma-eucalyptus         "#5f875f")
  ;;     (miasma-reseda             "#78834b")
  ;;     (miasma-walnut             "#685742")
  ;;     (miasma-tangerine          "#fd9720")
  ;;     (miasma-copper             "#bb7744")
  ;;     (miasma-cedar              "#b36d43")
  ;;     (miasma-terracota          "#c86448")
  ;;     (miasma-chestnut           "#553333")
  ;;     (miasma-fire               "#824040")
  ;;     (miasma-lemon              "#fbec9f")
  ;;     (miasma-ecru               "#d7c483")
  ;;     (miasma-brass              "#c9a554"))
  ;;     (custom-set-faces
  ;;      `(tree-sitter-hl-face:attribute             ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:comment               ((t (:foreground ,miasma-dark-gray ))))
  ;;      `(tree-sitter-hl-face:constant              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:constant.builtin      ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:constructor           ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:doc                   ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:embedded              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:escape                ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:function              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:function.builtin      ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:function.call         ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:function.macro        ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:function.special      ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:keyword               ((t (:foreground ,miasma-copper    ))))
  ;;      `(tree-sitter-hl-face:label                 ((t (:foreground ,miasma-copper    ))))
  ;;      `(tree-sitter-hl-face:method                ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:method.call           ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:number                ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:operator              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:property              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:property.definition   ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:punctuation           ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:punctuation.bracket   ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:punctuation.delimiter ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:punctuation.special   ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:string                ((t (:foreground ,miasma-reseda    ))))
  ;;      `(tree-sitter-hl-face:string.special        ((t (:foreground ,miasma-reseda    ))))
  ;;      `(tree-sitter-hl-face:tag                   ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:type                  ((t (:foreground ,miasma-light-gray :slant italic))))
  ;;      `(tree-sitter-hl-face:type.argument         ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:type.builtin          ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:type.parameter        ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:type.super            ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:variable              ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:variable.builtin      ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:variable.parameter    ((t (:foreground ,miasma-light-gray))))
  ;;      `(tree-sitter-hl-face:variable.special      ((t (:foreground ,miasma-light-gray))))
  ;;      )))
#+end_src

*** TeX

#+begin_src emacs-lisp :tangle "init.el"
  ;; (let ((miasma-light-charcoal "#222222")
  ;;   (miasma-charcoal           "#1c1c1c")
  ;;   (miasma-obsidian           "#151515")
  ;;   (miasma-graphite           "#444444")
  ;;   (miasma-dark-gray          "#666666")
  ;;   (miasma-light-gray         "#c2c2b0")
  ;;   (miasma-marble             "#eaeaea")
  ;;   (miasma-river              "#1f3a5f")
  ;;   (miasma-sky                "#87CEEB")
  ;;   (miasma-forest             "#242d1d")
  ;;   (miasma-moss               "#2f361f")
  ;;   (miasma-olive              "#43492a")
  ;;   (miasma-ivy                "#335533")
  ;;   (miasma-eucalyptus         "#5f875f")
  ;;   (miasma-reseda             "#78834b")
  ;;   (miasma-walnut             "#685742")
  ;;   (miasma-tangerine          "#fd9720")
  ;;   (miasma-copper             "#bb7744")
  ;;   (miasma-cedar              "#b36d43")
  ;;   (miasma-terracota          "#c86448")
  ;;   (miasma-chestnut           "#553333")
  ;;   (miasma-fire               "#824040")
  ;;   (miasma-lemon              "#fbec9f")
  ;;   (miasma-ecru               "#d7c483")
  ;;   (miasma-brass              "#c9a554"))
  ;;   (custom-set-faces
  ;;    `(font-latex-bold-face         ((t (:foreground ,miasma-light-gray :weight bold))))
  ;;    `(font-latex-italic-face       ((t (:foreground ,miasma-light-gray :slant italic))))
  ;;    `(font-latex-underline-face       ((t (:foreground ,miasma-light-gray :underline t))))
  ;;    `(font-latex-math-face         ((t (:foreground ,miasma-ecru))))
  ;;    `(font-latex-string-face       ((t (:foreground ,miasma-ecru))))
  ;;    `(font-latex-script-char-face  ((t (:foreground ,miasma-ecru))))
  ;;    `(font-latex-sectioning-0-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sectioning-1-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sectioning-2-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sectioning-3-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sectioning-4-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sectioning-5-face ((t (:foreground ,miasma-light-gray))))
  ;;    `(font-latex-sedate-face      ((t (:foreground ,miasma-eucalyptus))))
  ;;    `(font-latex-warning-face      ((t (:foreground ,miasma-ecru))))
  ;;    ))
#+end_src

** Elpaca wait

#+begin_src emacs-lisp :tangle "init.el"
  (elpaca-wait)
#+end_src

* Custom functions

This section defines custom functions.

** my/keyboard-quit-dwim

This is from [[https://protesilaos.com/codelog/2024-11-28-basic-emacs-configuration/#h:e5e7b781-4b04-4c53-bf23-5e81789549ce][Protesilaos]].

#+begin_src emacs-lisp :tangle "init.el"
  (defun my/keyboard-quit-dwim ()
    "Do-What-I-Mean behaviour for a general `keyboard-quit'.

  The generic `keyboard-quit' does not do the expected thing when
  the minibuffer is open.  Whereas we want it to close the
  minibuffer, even without explicitly focusing it.

  The DWIM behaviour of this command is as follows:

  - When the region is active, disable it.
  - When a minibuffer is open, but not focused, close the minibuffer.
  - When the Completions buffer is selected, close it.
  - In every other case use the regular `keyboard-quit'."
    (interactive)
    (cond
     ((region-active-p)
      (keyboard-quit))
     ((derived-mode-p 'completion-list-mode)
      (delete-completion-window))
     ((> (minibuffer-depth) 0)
      (abort-recursive-edit))
     (t
      (keyboard-quit))))
#+end_src

** my/org-dwim-at-point

Execute an action in =org-mode= based on where the point is.

#+begin_src emacs-lisp :tangle "init.el"
  (defun my/org-dwim-at-point ()
    "Do-what-I-mean at point.
  Handles common Org elements intuitively."
    (interactive)
    (let* ((context (org-element-context))
           (type (org-element-type context)))
      (cond
       ;; Check for checkbox inside a list item
       ((and (eq type 'item)
             (org-element-property :checkbox context))
        (org-toggle-checkbox))

       ((eq type 'headline)
        (org-todo))

       ((eq type 'link)
        (org-open-at-point))

       ((eq type 'footnote-reference)
        (org-footnote-goto-definition
         (org-element-property :label context)))

       ((eq type 'footnote-definition)
        (org-footnote-goto-previous-reference
         (org-element-property :label context)))

       ((eq type 'table-row)
        (org-table-recalculate))

       ((memq type '(latex-fragment latex-environment))
        (org-latex-preview))

       (t
        (message "No specific action for this element")))))
#+end_src

* Keybindings

** Generic

#+begin_src emacs-lisp :tangle "init.el"

  ;; Keyboard quit
  (define-key global-map (kbd "C-g") #'my/keyboard-quit-dwim)

  ;; Org dwim at point
  (with-eval-after-load 'evil
    (add-hook 'org-mode-hook
              (lambda ()
                (evil-define-key 'normal org-mode-map
                  (kbd "RET") #'my/org-dwim-at-point))))

  ;; Window movements
  (global-unset-key (kbd "M-<left>"))
  (global-unset-key (kbd "M-<down>"))
  (global-unset-key (kbd "M-<up>"))
  (global-unset-key (kbd "M-<right>"))
  (define-key evil-normal-state-map (kbd "M-<left>")  'evil-window-left)
  (define-key evil-normal-state-map (kbd "M-<down>")  'evil-window-down)
  (define-key evil-normal-state-map (kbd "M-<up>")    'evil-window-up)
  (define-key evil-normal-state-map (kbd "M-<right>") 'evil-window-right)

  ;; Point movements
  (global-unset-key (kbd "C-e"))
  (define-key evil-normal-state-map (kbd "C-e")  'end-of-visual-line)

  ;; org-agenda-earlier and later
  (with-eval-after-load 'org-agenda
    (define-key org-agenda-mode-map (kbd "[") #'org-agenda-earlier)
    (define-key org-agenda-mode-map (kbd "]") #'org-agenda-later))

  ;; arrows move in visual lines
  (with-eval-after-load 'evil
    (define-key evil-normal-state-map [down] 'evil-next-visual-line)
    (define-key evil-normal-state-map [up]   'evil-previous-visual-line)
    (define-key evil-visual-state-map [down] 'evil-next-visual-line)
    (define-key evil-visual-state-map [up]   'evil-previous-visual-line)
    (define-key evil-motion-state-map [down] 'evil-next-visual-line)
    (define-key evil-motion-state-map [up]   'evil-previous-visual-line)
    (add-hook 'org-mode-hook
            (lambda ()
              (define-key evil-normal-state-local-map [down] 'evil-next-line)
              (define-key evil-normal-state-local-map [up]   'evil-previous-line)
              (define-key evil-visual-state-local-map [down] 'evil-next-line)
              (define-key evil-visual-state-local-map [up]   'evil-previous-line)
              (define-key evil-motion-state-local-map [down] 'evil-next-line)
              (define-key evil-motion-state-local-map [up]   'evil-previous-line))))

#+end_src

** Commands
*** :k
#+begin_src emacs-lisp :tangle "init.el"
(defun my/kill-current-buffer ()
  "Kill the current buffer without confirmation."
  (interactive)
  (kill-buffer (current-buffer)))

(evil-ex-define-cmd "k" 'my/kill-current-buffer)
#+end_src
* Emacs server

#+begin_src emacs-lisp :tangle "init.el"
  (use-package server
    :ensure nil
    :config
    (setq server-client-instructions nil)
    (unless (server-running-p)
      (server-start)))
#+end_src
